{"version":3,"sources":["redux/store.js","common/Api/ApiReducer.js","redux/initialState.js","redux/rootReducer.js","components/Task/TaskReducer.js","redux/store.prod.js","serviceWorker.js","index.js","components/Task/TaskConstants.js"],"names":["module","exports","require","actionTypeEndsInSuccess","type","substring","length","tasks","taskCount","apiCallInProgress","rootReducer","combineReducers","state","initialState","action","taskActionTypes","READ_TASKS","payload","GET_TASK_BY_ID","CREATE_TASK","UPDATE_TASK","map","item","_id","DELETE_TASK","filter","SET_TASK_COUNT","configureStore","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","store","App","loadable","Login","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","actions","GET_TASK_STATUS_OPTIONS_SUCCESS","GET_TASK_INTERFACE_SUCCESS"],"mappings":"wFAEEA,EAAOC,QAAUC,EAAQ,K,8HCFrBC,EAA0B,SAACC,GAC/B,MAA2C,aAApCA,EAAKC,UAAUD,EAAKE,OAAS,I,uBCDvB,GACbC,MAAO,GACPC,UAAW,EACXC,kBAAmB,GCONC,EANKC,YAAgB,CAClCJ,MCFa,WAAyC,IAAxCK,EAAuC,uDAA/BC,EAAaN,MAAOO,EAAW,uCACrD,OAAQA,EAAOV,MACf,KAAKW,IAAgBC,WACnB,OAAO,YAAIF,EAAOG,SACpB,KAAKF,IAAgBG,eAErB,KAAKH,IAAgBI,YACnB,OAAOP,EAAMN,OAAS,EAAf,sBAAuBM,GAAvB,CAA8BE,EAAOG,UAAW,CAACH,EAAOG,SACjE,KAAKF,IAAgBK,YACnB,OAAOR,EAAMS,KAAI,SAAAC,GAAI,OAAKA,EAAKC,MAAQT,EAAOG,QAAQM,IAA5B,eAAuCT,EAAOG,SAAYK,KACtF,KAAKP,IAAgBS,YACnB,OAAOZ,EAAMa,QAAO,SAAAH,GAAI,OAAIA,EAAKC,MAAQT,EAAOG,WAClD,QACE,OAAOL,IDVTJ,UCcuB,WAA6C,IAA5CI,EAA2C,uDAAnCC,EAAaL,UAAWM,EAAW,uCACnE,OAAIA,EAAOV,OAASW,IAAgBW,eAC3BZ,EAAOG,QAGTL,GDlBPH,kBFHa,WAAwB,IAAvBG,EAAsB,uDAAd,EAAGE,EAAW,uCAEpC,MAAoB,mBAAhBA,EAAOV,KACFQ,EAAQ,EACU,mBAAhBE,EAAOV,MAA6BD,EAAwBW,EAAOV,MACrEQ,EAAQ,EAEVA,K,QIPM,SAASe,EAAed,GACrC,OAAOe,YAAYlB,EAAaG,EAAcgB,YAAgBC,Q,oFCO5CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCVAC,E,MAAQR,GAAY,IAEpBS,EAAMC,aAAS,kBAAM,+DACrBC,EAAQD,aAAS,kBAAM,sEAE7BE,IAASC,OACP,kBAAC,IAAD,CAAeL,MAAOA,GACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,UAAS,kBAACH,EAAD,OACrB,kBAAC,IAAD,CAAOG,KAAK,KAAI,kBAACL,EAAD,UAItBM,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+BE9HbC,IAXC,CACdpC,YAAa,sBACbH,WAAY,qBACZI,YAAa,sBACbI,YAAa,cACbN,eAAgB,yBAChBsC,gCAAiC,kCACjCC,2BAA4B,6BAC5B/B,eAAgB,oB","file":"static/js/main.8cb122a6.chunk.js","sourcesContent":["// Use CommonJS require below so we can dynamically import during build-time.\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./store.prod')\n} else {\n  module.exports = require('./store.dev');\n}\n","const actionTypeEndsInSuccess = (type) => {\n  return type.substring(type.length - 8) === \"_SUCCESS\";\n}\n\nexport default (state = 0, action) => {\n\n  if (action.type === 'BEGIN_API_CALL') {\n    return state + 1;\n  } else if (action.type === \"API_CALL_ERROR\" || actionTypeEndsInSuccess(action.type)) {\n    return state - 1;\n  }\n  return state;\n}\n","export default {\n  tasks: [],\n  taskCount: 0,\n  apiCallInProgress: 0\n}\n","import { combineReducers } from 'redux'\nimport apiCallInProgress from '../common/Api/ApiReducer'\nimport tasks, { taskCount } from '../components/Task/TaskReducer'\n\nconst rootReducer = combineReducers({\n  tasks,\n  taskCount,\n  apiCallInProgress\n});\n\nexport default rootReducer;\n","import taskActionTypes from './TaskConstants'\nimport initialState from '../../redux/initialState'\n\nexport default (state = initialState.tasks, action) => {\n  switch (action.type) {\n  case taskActionTypes.READ_TASKS:\n    return [...action.payload];\n  case taskActionTypes.GET_TASK_BY_ID:\n    return state.length > 0 ? [...state, action.payload] : [action.payload]\n  case taskActionTypes.CREATE_TASK:\n    return state.length > 0 ? [...state, action.payload] : [action.payload]\n  case taskActionTypes.UPDATE_TASK:\n    return state.map(item => (item._id === action.payload._id ? { ...action.payload } : item))\n  case taskActionTypes.DELETE_TASK:\n    return state.filter(item => item._id !== action.payload)\n  default:\n    return state;\n  }\n}\n\nexport const taskCount = (state = initialState.taskCount, action) => {\n  if (action.type === taskActionTypes.SET_TASK_COUNT) {\n    return action.payload\n  }\n\n  return state;\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './rootReducer';\nimport thunk from 'redux-thunk';\n\nexport default function configureStore(initialState) {\n  return createStore(rootReducer, initialState, applyMiddleware(thunk));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import loadable from '@loadable/component'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport createStore from './redux/store'\n\nconst store = createStore({});\n\nconst App = loadable(() => import('./components/App/App'))\nconst Login = loadable(() => import('./components/Login/Login'))\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <Router>\n      <Switch>\n        <Route path='/login'><Login /></Route>\n        <Route path='/'><App /></Route>\n      </Switch>\n    </Router>\n  </ReduxProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","const actions = {\n  CREATE_TASK: \"CREATE_TASK_SUCCESS\",\n  READ_TASKS: \"READ_TASKS_SUCCESS\",\n  UPDATE_TASK: \"UPDATE_TASK_SUCCESS\",\n  DELETE_TASK: \"DELETE_TASK\",\n  GET_TASK_BY_ID: \"GET_TASK_BY_ID_SUCCESS\",\n  GET_TASK_STATUS_OPTIONS_SUCCESS: \"GET_TASK_STATUS_OPTIONS_SUCCESS\",\n  GET_TASK_INTERFACE_SUCCESS: \"GET_TASK_INTERFACE_SUCCESS\",\n  SET_TASK_COUNT: \"SET_TASK_COUNT\"\n}\n\nexport default actions\n"],"sourceRoot":""}