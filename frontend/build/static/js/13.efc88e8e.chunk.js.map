{"version":3,"sources":["components/Task/TaskList.js","common/Paging/Paging.js","common/SortBy/SortBy.js","common/LimitResult/LimitResult.js","components/Task/Task.js","common/Api/ApiEndpoints.js","components/Task/TaskApi.js","components/Task/TaskActions.js","common/Api/ApiActions.js"],"names":["TaskList","items","remove","history","useHistory","className","map","item","index","Card","key","variant","CardContent","Typography","title","status","dangerouslySetInnerHTML","__html","description","CardActions","Button","size","color","onClick","push","_id","Paging","count","callback","params","queryString","parse","location","search","useState","parseInt","page","defaultPage","Pagination","shape","id","onChange","event","value","queryStringObject","parsedQueryString","stringify","options","name","sortBy","setSortBy","Grid","container","alignItems","spacing","InputLabel","htmlFor","Select","e","target","MenuItem","limit","setLimit","Task","loadTasks","props","actions","getTasks","deleteTask","then","res","handleNewTask","this","tasks","loading","taskCount","Math","round","BackdropLoader","gutterBottom","style","cursor","justify","SortBy","LimitResult","React","PureComponent","connectedStateAndProps","connect","ownProps","task","apiCallInProgress","dispatch","bindActionCreators","taskActions","login","url","apiEndpoints","axios","get","getTaskById","createTask","post","updateTask","put","delete","getTasksStatus","getTasksSuccess","type","READ_TASKS","payload","setTaskCount","SET_TASK_COUNT","getTaskByIdSuccess","GET_TASK_BY_ID","creteTaskSuccess","CREATE_TASK","updateTaskSuccess","UPDATE_TASK","deleteTaskSuccess","DELETE_TASK","getState","a","taskApi","response","data","saveTask","catch","error"],"mappings":"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","file":"static/js/13.efc88e8e.chunk.js","sourcesContent":["import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Button, Card, CardContent, Typography, CardActions } from '@material-ui/core'\n\nconst TaskList = ({ items, remove }) => {\n\n  let history = useHistory()\n\n  return (\n    <div className=\"TaskList\">\n      {items.map((item, index) => (\n        <Card key={index} className=\"card-item\" variant=\"outlined\">\n          <CardContent>\n            <Typography variant=\"h4\">\n              {item.title}\n              <Typography variant=\"caption\">\n                <span className={`custom-badge ${item.status}`}>{item.status}</span>\n              </Typography>\n            </Typography>\n            <Typography dangerouslySetInnerHTML={{ __html: item.description }}/>\n            <CardActions>\n              <Button size=\"small\" color=\"primary\" onClick={() => history.push(`/task/${item._id}`)}>\n                Details\n              </Button>\n              <Button size=\"small\" color=\"primary\" onClick={() => history.push(`/task/edit/${item._id}`)}>\n                Edit\n              </Button>\n              <Button size=\"small\" variant=\"contained\" color=\"secondary\"\n                      onClick={() => remove(item._id)}>remove</Button>\n            </CardActions>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n\nexport default TaskList\n","import React, { useState } from 'react'\nimport Pagination from '@material-ui/lab/Pagination'\nimport queryString from 'query-string'\nimport { useHistory } from 'react-router-dom'\n\nconst Paging = ({ count, callback }) => {\n\n  let history = useHistory()\n  let params = queryString.parse(history.location.search)\n  let [defaultPage] = useState(parseInt(params.page) || 1)\n\n  const updateQueryString = (event, value) => {\n    let queryStringObject = queryString.parse(history.location.search)\n    queryStringObject.page = value\n    let parsedQueryString = queryString.stringify(queryStringObject)\n    history.push({ search: parsedQueryString })\n    callback()\n  }\n\n  return (\n    count > 1 ?\n      <Pagination color=\"secondary\" shape=\"rounded\" size=\"small\"\n        id=\"pagination\" count={count} defaultPage={defaultPage} onChange={updateQueryString} /> :\n      null\n  )\n}\n\nexport default Paging\n","import React, { useState } from 'react';\nimport {\n  Select,\n  MenuItem,\n  InputLabel,\n  Grid\n} from '@material-ui/core'\nimport queryString from 'query-string'\nimport { useHistory } from 'react-router-dom'\nimport ImportExportIcon from '@material-ui/icons/ImportExport'\n\n\nconst options = [\n  { name: \"Date added (oldest)\", value: 'createdAt' },\n  { name: \"Date added (newest)\", value: '-createdAt' },\n  { name: \"Title (a-z)\", value: 'title' },\n  { name: \"Title (z-a)\", value: '-title' }\n]\n\nexport default ({ callback }) => {\n\n  let history = useHistory();\n  let params = queryString.parse(history.location.search);\n  let [sortBy, setSortBy] = useState(params.sortBy || options[0].value);\n\n  const updateQueryString = (e) => {\n    let value = e.target.value;\n    setSortBy(value);\n    let queryStringObject = queryString.parse(history.location.search)\n    queryStringObject.sortBy = value;\n    let parsedQueryString = queryString.stringify(queryStringObject)\n    history.push({ search: parsedQueryString })\n    callback()\n  }\n\n  return (\n    <Grid container alignItems=\"center\" spacing={1}>\n      <Grid item><ImportExportIcon /></Grid>\n      <Grid item><InputLabel htmlFor=\"sortBy\" >Sort By:</InputLabel></Grid>\n      <Grid item>\n        <Select id=\"sortBy\" value={sortBy} onChange={updateQueryString}>\n          {\n            options.map((item, index) => {\n              return (\n                <MenuItem key={index} value={item.value}>\n                  {item.name}\n                </MenuItem>\n              )\n            })\n          }\n        </Select>\n      </Grid>\n    </Grid>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  Select,\n  MenuItem,\n  Grid,\n  InputLabel\n} from '@material-ui/core'\nimport queryString from 'query-string'\nimport { useHistory } from 'react-router-dom'\nimport SortIcon from '@material-ui/icons/Sort'\n\nconst options = [\n  { name: '1', value: '1' },\n  { name: '5', value: '5' },\n  { name: '10', value: '10' },\n  { name: '25', value: '25' },\n  { name: '50', value: '50' },\n  { name: '100', value: '100' }\n]\n\nexport default ({ callback }) => {\n\n  let history = useHistory()\n  let params = queryString.parse(history.location.search)\n  let [limit, setLimit] = useState(params.limit || options[2].value)\n\n  const updateQueryString = (e) => {\n    let value = e.target.value\n    setLimit(value)\n    let queryStringObject = queryString.parse(history.location.search)\n    queryStringObject.limit = value\n    let parsedQueryString = queryString.stringify(queryStringObject)\n    history.push({ search: parsedQueryString })\n    callback()\n  }\n\n  return (\n    <Grid container spacing={1} alignItems=\"center\">\n      <Grid item><SortIcon /></Grid>\n      <Grid item>\n        <InputLabel htmlFor=\"limitResult\">Items per page:</InputLabel>\n      </Grid>\n      <Grid item>\n        <Select id=\"limitResult\" value={limit} onChange={updateQueryString}>\n          {\n            options.map((item, index) => {\n              return (\n                <MenuItem key={index} value={item.value}>\n                  {item.name}\n                </MenuItem>\n              )\n            })\n          }\n        </Select>\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux';\nimport * as taskActions from './TaskActions'\nimport TaskList from './TaskList'\nimport Paging from '../../common/Paging/Paging'\nimport SortBy from '../../common/SortBy/SortBy'\nimport LimitResult from '../../common/LimitResult/LimitResult'\nimport queryString from 'query-string'\nimport BackdropLoader from '../../common/BackdropLoader/BackdropLoader'\nimport { Grid, Typography } from '@material-ui/core'\n\nclass Task extends React.PureComponent {\n\n  loadTasks = (key, value) => {\n    let { actions, history } = this.props\n    const queryStringObject = queryString.parse(history.location.search)\n    let parsedQueryString = queryString.stringify(queryStringObject)\n    parsedQueryString = parsedQueryString ? '?' + parsedQueryString : ''\n    actions.getTasks(parsedQueryString)\n  }\n\n  remove = (id) => {\n    this.props.actions.deleteTask(id)\n      .then(res => {\n\n      });\n  }\n\n  handleNewTask = () => {\n    this.props.history.push('/task/create')\n  }\n\n  componentDidMount() {\n    this.loadTasks()\n  }\n\n  render() {\n    const { tasks, loading, taskCount, history } = this.props\n    const queryStringObject = queryString.parse(history.location.search)\n    const page = queryStringObject.page || 1\n    const limit = parseInt(queryStringObject.limit) || 10\n    const count = taskCount ? Math.round(taskCount / limit) : 1\n    return (\n      loading ?\n        <BackdropLoader /> :\n        <>\n          <div>\n            <Typography variant=\"h3\" gutterBottom>\n              All Tasks\n              <Typography variant=\"caption\" gutterBottom onClick={this.handleNewTask} style={{ cursor: 'pointer' }}>\n                New Task\n              </Typography>\n            </Typography>\n          </div>\n          <Grid container spacing={2} alignItems=\"center\" justify=\"flex-end\" className=\"filters-wrapper\">\n            <Grid item><SortBy callback={this.loadTasks} /></Grid>\n            <Grid item><LimitResult callback={this.loadTasks} /></Grid>\n          </Grid>\n          <TaskList items={tasks} remove={this.remove} />\n          <br />\n          <Paging page={page} count={count} callback={this.loadTasks} />\n        </>\n    );\n\n  }\n}\n\nTask.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  taskCount: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = ({ task, apiCallInProgress }, ownProps) => {\n  return {\n    tasks: task.items ? task.items : [],\n    taskCount: task.taskCount,\n    loading: apiCallInProgress > 0\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(taskActions, dispatch)\n});\n\nconst connectedStateAndProps = connect(mapStateToProps, mapDispatchToProps);\nexport default connectedStateAndProps(Task);\n","export default {\n  login: '/api/auth/login',\n  task: '/api/task'\n}\n","import axios from 'axios';\nimport apiEndpoints from '../../common/Api/ApiEndpoints'\n\nexport const getTasks = (queryString) => {\n  let url = queryString ? apiEndpoints.task + queryString : apiEndpoints.task;\n  return axios.get(url)\n}\n\nexport const getTaskById = (id) => {\n  return axios.get(apiEndpoints.task + `/${id}`)\n}\n\nexport const createTask = (task) => {\n  return axios.post(apiEndpoints.task, task)\n}\n\nexport const updateTask = (task) => {\n  return axios.put(apiEndpoints.task + `/${task._id}`, task)\n}\n\nexport const deleteTask = (id) => {\n  return axios.delete(apiEndpoints.task + `/${id}`)\n}\n\nexport const getTasksStatus = () => {\n  return axios.get(apiEndpoints.task + '/status')\n}\n","import actions from './TaskConstants'\nimport * as taskApi from './TaskApi'\nimport { apiCallError, beginApiCall } from '../../common/Api/ApiActions'\n\nexport const getTasksSuccess = (tasks) => ({ type: actions.READ_TASKS, payload: tasks })\nexport const setTaskCount = (count) => ({ type: actions.SET_TASK_COUNT, payload: count })\nexport const getTaskByIdSuccess = (task) => ({ type: actions.GET_TASK_BY_ID, payload: task })\nexport const creteTaskSuccess = (task) => ({ type: actions.CREATE_TASK, payload: task })\nexport const updateTaskSuccess = (task) => ({ type: actions.UPDATE_TASK, payload: task })\nexport const deleteTaskSuccess = (id) => ({ type: actions.DELETE_TASK, payload: id })\n\nexport const getTasks = (queryString) => {\n  return async (dispatch, getState) => {\n    dispatch(beginApiCall())\n    try {\n      let { task } = getState()\n      let response = await taskApi.getTasks(queryString)\n      dispatch(getTasksSuccess(response.data.items))\n      if (response.data.count !== task.count)\n        dispatch(setTaskCount(response.data.count))\n    } catch (error) {\n      dispatch(apiCallError(error))\n      throw error\n    }\n  }\n}\n\nexport const getTaskById = (id) => {\n  return async (dispatch) => {\n    try {\n      dispatch(beginApiCall())\n      let response = await taskApi.getTaskById(id)\n      dispatch(getTaskByIdSuccess(response.data.item))\n    } catch (error) {\n      dispatch(apiCallError(error))\n      throw error\n    }\n  }\n}\n\nexport const saveTask = task => {\n  return async (dispatch) => {\n    dispatch(beginApiCall())\n    if (task._id) {\n      try {\n        let response = await taskApi.updateTask(task)\n        dispatch(updateTaskSuccess(response.data.item))\n        return response.data.item\n      } catch (error) {\n        dispatch(apiCallError(error))\n        throw error\n      }\n    } else {\n      try {\n        let response = await taskApi.createTask(task)\n        dispatch(creteTaskSuccess(response.data.item))\n        return response.data.item\n      } catch (error) {\n        dispatch(apiCallError(error))\n        throw error\n      }\n    }\n  }\n}\n\nexport const deleteTask = (id) => {\n  return (dispatch) => {\n    return taskApi.deleteTask(id).then(res => {\n      dispatch(deleteTaskSuccess(id))\n      return res;\n    }).catch(error => {\n      dispatch(apiCallError(error))\n      throw error;\n    })\n  }\n}\n","export function beginApiCall() {\n  return { type: 'BEGIN_API_CALL' };\n}\n\nexport function apiCallError() {\n  return { type: 'API_CALL_ERROR' };\n}\n"],"sourceRoot":""}