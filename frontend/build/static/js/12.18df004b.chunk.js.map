{"version":3,"sources":["common/TinyMCE/TinyMCE.js","components/Task/TaskForm.js","components/Task/ManageTask.js","common/Api/ApiEndpoints.js","components/Task/TaskApi.js","components/Task/TaskActions.js","common/Api/ApiActions.js"],"names":["TinyMCE","handleRteChange","value","className","style","maxWidth","htmlFor","id","init","height","apiKey","process","onEditorChange","connect","dispatch","actions","bindActionCreators","taskActions","taskStatusOptions","props","history","useHistory","useState","errors","setErrors","saving","setSaving","task","setTask","handleChange","e","target","name","prevTask","isFormValid","title","isEmpty","validateEditor","description","Object","keys","length","sanitizeHtml","exclusiveFilter","frame","tag","textFilter","replace","trim","allowedTags","defaults","concat","allowedAttributes","_id","onSubmit","preventDefault","saveTask","then","push","catch","err","console","log","finally","noValidate","autoComplete","FormControl","margin","fullWidth","error","OutlinedInput","required","autoFocus","onChange","FormHelperText","Select","status","variant","map","item","index","MenuItem","key","prevState","Button","color","type","disabled","LinearProgress","ManageTask","state","this","taskInterface","match","params","getTaskById","setState","prevProps","snapshot","BackdropLoader","React","Component","ownProps","tasks","find","login","getTasks","queryString","url","apiEndpoints","axios","get","createTask","post","updateTask","put","deleteTask","delete","getTasksStatus","getTasksSuccess","READ_TASKS","payload","setTaskCount","count","SET_TASK_COUNT","getTaskByIdSuccess","GET_TASK_BY_ID","creteTaskSuccess","CREATE_TASK","updateTaskSuccess","UPDATE_TASK","deleteTaskSuccess","DELETE_TASK","getState","a","taskApi","response","data","items","res"],"mappings":"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","file":"static/js/12.18df004b.chunk.js","sourcesContent":["import React from 'react';\nimport { Editor } from '@tinymce/tinymce-react'\nconst KEY = process.env.REACT_APP_TINY_MCE_KEY;\n\nconst TinyMCE = ({ handleRteChange, value }) => {\n  return (\n    <div className=\"rte-wrapper\" style={{ maxWidth: '800px' }}>\n      <label htmlFor=\"tiny-mce\">Description</label>\n      <Editor id=\"tiny-mce\" init={{ height: 300 }} value={value}\n              apiKey={KEY} onEditorChange={handleRteChange} />\n    </div>\n  )\n}\n\nexport default TinyMCE\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport * as taskActions from './TaskActions'\nimport { useHistory } from 'react-router-dom'\nimport TinyMCE from '../../common/TinyMCE/TinyMCE'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport {\n  Button,\n  Select,\n  OutlinedInput,\n  FormControl,\n  LinearProgress,\n  MenuItem,\n  FormHelperText\n} from '@material-ui/core/'\nimport isEmpty from 'validator/es/lib/isEmpty'\nimport sanitizeHtml from 'sanitize-html'\n\nconst TaskForm = ({ taskStatusOptions, actions, ...props }) => {\n\n  let history = useHistory()\n  const [errors, setErrors] = useState({})\n  const [saving, setSaving] = useState(false)\n  let [task, setTask] = useState({ ...props.task })\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (!isFormValid()) {\n      return\n    }\n    setSaving(true)\n    actions.saveTask(task)\n      .then(task => {\n        history.push(`/task/${task._id}`)\n      })\n      .catch(err => {\n        console.log('err', err)\n      }).finally( () => setSaving(true))\n  }\n\n  const handleChange = (e) => {\n    let { name, value } = e.target\n    setTask(prevTask => ({ ...prevTask, [name]: value }))\n  }\n\n  const handleRteChange = (value) => {\n    setTask(prevState => ({\n      ...prevState,\n      description: value\n    }))\n  }\n\n  const isFormValid = () => {\n    const errors = {}\n\n    if (!task.title && isEmpty(task.title)) {\n      errors.title = 'Title cannot be empty'\n    }\n\n    if( !validateEditor(task.description) ){\n      errors.description = \"Invalid editor contents\";\n    }\n\n    setErrors(errors)\n    return Object.keys(errors).length === 0\n  }\n\n  const validateEditor = (value) => {\n    return sanitizeHtml(value, {\n      exclusiveFilter: (frame) => {\n        return frame.tag === 'script'\n      },\n      textFilter: (value) => {\n        return value.replace(/\\\\n|\\s\\s/g, '').trim()\n      },\n      allowedTags: sanitizeHtml.defaults.allowedTags.concat(['h2']),\n      allowedAttributes: false\n    })\n  }\n\n  return (\n    <>\n      <h1>{task._id ? 'Edit' : 'Create'} task</h1>\n      <form onSubmit={handleSubmit} noValidate autoComplete=\"off\" className=\"task-form\">\n        <FormControl margin=\"dense\" fullWidth error={!!errors.title}>\n          <label htmlFor=\"title\">Title</label>\n          <OutlinedInput required id='title' name='title' autoFocus onChange={handleChange} value={task.title}/>\n          {errors.title ? <FormHelperText>{errors.title}</FormHelperText> : null}\n        </FormControl>\n        <FormControl fullWidth>\n          <label htmlFor=\"status\">Status</label>\n          <Select name=\"status\" id=\"status\" onChange={handleChange} value={task.status} variant=\"outlined\">\n            {taskStatusOptions.map((item, index) => (\n              <MenuItem key={index} value={item.value}>{item.name}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <FormControl fullWidth error={!!errors.description}>\n          <TinyMCE handleRteChange={handleRteChange} value={task.description}/>\n          {errors.description ? <FormHelperText>{errors.description}</FormHelperText> : null}\n        </FormControl>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={saving}>Save</Button>\n        <br/>\n        {saving ? <LinearProgress/> : null}\n      </form>\n    </>\n  )\n}\n\nTaskForm.propTypes = {\n  task: PropTypes.object.isRequired,\n  taskStatusOptions: PropTypes.array.isRequired\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(taskActions, dispatch)\n})\n\nexport default connect(null, mapDispatchToProps)(TaskForm)\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport * as taskActions from './TaskActions'\nimport BackdropLoader from '../../common/BackdropLoader/BackdropLoader'\nimport {connect} from 'react-redux'\nimport {bindActionCreators} from 'redux';\nimport TaskForm from './TaskForm'\n\nclass ManageTask extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {task: {}}\n  }\n\n  componentDidMount() {\n    let {taskInterface, actions, match, task} = this.props;\n    let {id} = match.params;\n    if (!id) {// creating new one\n      this.setState({task: {...taskInterface}})\n    } else if (id && Object.keys(task).length === 0) {\n      // updating new one but URL is loaded directly\n      actions.getTaskById(id).catch(err => {\n        throw err\n      })\n    } else {\n      // update new one by clicking on edit link\n      this.setState({task: {...task}})\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if( Object.keys(prevProps.task).length !== Object.keys(this.props.task).length){\n      this.setState({task: {...this.props.task}})\n    }\n  }\n\n  render() {\n    let {taskStatusOptions} = this.props;\n    let {task} = this.state;\n    return (\n      Object.keys(task).length === 0 ? <BackdropLoader/> :\n        <TaskForm task={task} taskStatusOptions={taskStatusOptions}/>\n    )\n  }\n}\n\nManageTask.propTypes = {\n  task: PropTypes.object.isRequired,\n  taskStatusOptions: PropTypes.array.isRequired,\n  taskInterface: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = ({tasks}, ownProps) => {\n  const id = ownProps.match.params.id;\n  const task = id && tasks.length > 0 ? tasks.find(item => item._id === id) : {}\n  return {\n    task\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(taskActions, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTask)\n","export default {\n  login: '/api/auth/login',\n  task: '/api/task'\n}\n","import axios from 'axios';\nimport apiEndpoints from '../../common/Api/ApiEndpoints'\n\nexport const getTasks = (queryString) => {\n  let url = queryString ? apiEndpoints.task + queryString : apiEndpoints.task;\n  return axios.get(url)\n}\n\nexport const getTaskById = (id) => {\n  return axios.get(apiEndpoints.task + `/${id}`)\n}\n\nexport const createTask = (task) => {\n  return axios.post(apiEndpoints.task, task)\n}\n\nexport const updateTask = (task) => {\n  return axios.put(apiEndpoints.task + `/${task._id}`, task)\n}\n\nexport const deleteTask = (id) => {\n  return axios.delete(apiEndpoints.task + `/${id}`)\n}\n\nexport const getTasksStatus = () => {\n  return axios.get(apiEndpoints.task + '/status')\n}\n","import actions from './TaskConstants'\nimport * as taskApi from './TaskApi'\nimport { apiCallError, beginApiCall } from '../../common/Api/ApiActions'\n\nexport const getTasksSuccess = (tasks) => ({ type: actions.READ_TASKS, payload: tasks })\nexport const setTaskCount = (count) => ({ type: actions.SET_TASK_COUNT, payload: count })\nexport const getTaskByIdSuccess = (task) => ({ type: actions.GET_TASK_BY_ID, payload: task })\nexport const creteTaskSuccess = (task) => ({ type: actions.CREATE_TASK, payload: task })\nexport const updateTaskSuccess = (task) => ({ type: actions.UPDATE_TASK, payload: task })\nexport const deleteTaskSuccess = (id) => ({ type: actions.DELETE_TASK, payload: id })\n\nexport const getTasks = (queryString) => {\n  return async (dispatch, getState) => {\n    dispatch(beginApiCall())\n    try {\n      let { count } = getState()\n      let response = await taskApi.getTasks(queryString)\n      dispatch(getTasksSuccess(response.data.items))\n      if (response.data.count !== count)\n        dispatch(setTaskCount(response.data.count))\n    } catch (error) {\n      dispatch(apiCallError(error))\n      throw error\n    }\n  }\n}\n\nexport const getTaskById = (id) => {\n  return async (dispatch) => {\n    try {\n      dispatch(beginApiCall())\n      let response = await taskApi.getTaskById(id)\n      dispatch(getTaskByIdSuccess(response.data.item))\n    } catch (error) {\n      dispatch(apiCallError(error))\n      throw error\n    }\n  }\n}\n\nexport const saveTask = task => {\n  return async (dispatch) => {\n    dispatch(beginApiCall())\n    if (task._id) {\n      try {\n        let response = await taskApi.updateTask(task)\n        dispatch(updateTaskSuccess(response.data.item))\n        return response.data.item\n      } catch (error) {\n        dispatch(apiCallError(error))\n        throw error\n      }\n    } else {\n      try {\n        let response = await taskApi.createTask(task)\n        dispatch(creteTaskSuccess(response.data.item))\n        return response.data.item\n      } catch (error) {\n        dispatch(apiCallError(error))\n        throw error\n      }\n    }\n  }\n}\n\nexport const deleteTask = (id) => {\n  return (dispatch) => {\n    return taskApi.deleteTask(id).then(res => {\n      dispatch(deleteTaskSuccess(id))\n      return res;\n    }).catch(error => {\n      dispatch(apiCallError(error))\n      throw error;\n    })\n  }\n}\n","export function beginApiCall() {\n  return { type: 'BEGIN_API_CALL' };\n}\n\nexport function apiCallError() {\n  return { type: 'API_CALL_ERROR' };\n}\n"],"sourceRoot":""}