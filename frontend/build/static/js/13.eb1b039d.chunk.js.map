{"version":3,"sources":["components/Task/TaskList.js","common/Paging/Paging.js","common/SortBy/SortBy.js","common/LimitResult/LimitResult.js","components/Task/Task.js","common/Api/ApiEndpoints.js","components/Task/TaskApi.js","components/Task/TaskActions.js","common/Api/ApiActions.js"],"names":["TaskList","items","remove","history","useHistory","className","map","item","index","Card","key","variant","CardContent","Typography","title","status","dangerouslySetInnerHTML","__html","description","CardActions","Button","size","color","onClick","push","_id","Paging","count","params","queryString","parse","location","search","useState","parseInt","page","defaultPage","Pagination","shape","id","onChange","event","value","queryStringObject","parsedQueryString","stringify","options","name","sortBy","setSortBy","Grid","container","alignItems","spacing","InputLabel","htmlFor","Select","e","target","MenuItem","limit","setLimit","connectedStateAndProps","connect","state","ownProps","tasks","taskCount","loading","apiCallInProgress","dispatch","actions","bindActionCreators","taskActions","Math","round","useEffect","loadTasks","getTasks","BackdropLoader","gutterBottom","style","cursor","justify","SortBy","LimitResult","deleteTask","then","res","loadData","login","task","url","apiEndpoints","axios","get","getTaskById","createTask","post","updateTask","put","getTasksSuccess","type","READ_TASKS","payload","setTaskCount","SET_TASK_COUNT","getTaskByIdSuccess","GET_TASK_BY_ID","creteTaskSuccess","CREATE_TASK","updateTaskSuccess","UPDATE_TASK","deleteTaskSuccess","DELETE_TASK","a","taskApi","response","data","saveTask","delete","catch","err"],"mappings":"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","file":"static/js/13.eb1b039d.chunk.js","sourcesContent":["import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Button, Card, CardContent, Typography, CardActions } from '@material-ui/core'\n\nconst TaskList = ({ items, remove }) => {\n\n  let history = useHistory()\n\n  return (\n    <div className=\"TaskList\">\n      {items.map((item, index) => (\n        <Card key={index} className=\"card-item\" variant=\"outlined\">\n          <CardContent>\n            <Typography variant=\"h4\">\n              {item.title}\n              <Typography variant=\"caption\">\n                <span className={`custom-badge ${item.status}`}>{item.status}</span>\n              </Typography>\n            </Typography>\n            <Typography dangerouslySetInnerHTML={{ __html: item.description }}/>\n            <CardActions>\n              <Button size=\"small\" color=\"primary\" onClick={() => history.push(`/task/${item._id}`)}>\n                Details\n              </Button>\n              <Button size=\"small\" color=\"primary\" onClick={() => history.push(`/task/edit/${item._id}`)}>\n                Edit\n              </Button>\n              <Button size=\"small\" variant=\"contained\" color=\"secondary\"\n                      onClick={() => remove(item._id)}>remove</Button>\n            </CardActions>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  )\n}\n\nexport default TaskList\n","import React, { useState } from 'react'\nimport Pagination from '@material-ui/lab/Pagination'\nimport queryString from 'query-string'\nimport { useHistory } from 'react-router-dom'\n\nconst Paging = ({ count }) => {\n\n  let history = useHistory()\n  let params = queryString.parse(history.location.search)\n  let [defaultPage] = useState(parseInt(params.page) || 1)\n\n  const updateQueryString = (event, value) => {\n    let queryStringObject = queryString.parse(history.location.search)\n    queryStringObject.page = value\n    let parsedQueryString = queryString.stringify(queryStringObject)\n    history.push({ search: parsedQueryString })\n  }\n\n  return (\n    count > 1 ?\n      <Pagination color=\"secondary\" shape=\"rounded\" size=\"small\"\n                  id=\"pagination\" count={count} defaultPage={defaultPage} onChange={updateQueryString}/> :\n      null\n  )\n}\n\nexport default Paging\n","import React, { useState } from 'react';\nimport {\n  Select,\n  MenuItem,\n  InputLabel,\n  Grid\n} from '@material-ui/core'\nimport queryString from 'query-string'\nimport { useHistory } from 'react-router-dom'\nimport ImportExportIcon from '@material-ui/icons/ImportExport'\n\n\nconst options = [\n  { name: \"Date added (oldest)\", value: 'createdAt' },\n  { name: \"Date added (newest)\", value: '-createdAt' },\n  { name: \"Title (a-z)\", value: 'title' },\n  { name: \"Title (z-a)\", value: '-title' }\n]\n\nexport default () => {\n\n  let history = useHistory();\n  let params = queryString.parse(history.location.search);\n  let [sortBy, setSortBy] = useState(params.sortBy || options[0].value);\n\n  const updateQueryString = (e) => {\n    let value = e.target.value;\n    setSortBy(value);\n    let queryStringObject = queryString.parse(history.location.search)\n    queryStringObject.sortBy = value;\n    let parsedQueryString = queryString.stringify(queryStringObject)\n    history.push({ search: parsedQueryString })\n  }\n\n  return (\n    <Grid container alignItems=\"center\" spacing={1}>\n      <Grid item><ImportExportIcon/></Grid>\n      <Grid item><InputLabel htmlFor=\"sortBy\" >Sort By:</InputLabel></Grid>\n      <Grid item>\n        <Select id=\"sortBy\" value={sortBy} onChange={updateQueryString}>\n          {\n            options.map((item, index) => {\n              return (\n                <MenuItem key={index} value={item.value}>\n                  {item.name}\n                </MenuItem>\n              )\n            })\n          }\n        </Select>\n      </Grid>\n    </Grid>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  Select,\n  MenuItem,\n  Grid,\n  InputLabel\n} from '@material-ui/core'\nimport queryString from 'query-string'\nimport { useHistory } from 'react-router-dom'\nimport SortIcon from '@material-ui/icons/Sort'\n\nconst options = [\n  { name: '1', value: '1' },\n  { name: '5', value: '5' },\n  { name: '10', value: '10' },\n  { name: '25', value: '25' },\n  { name: '50', value: '50' },\n  { name: '100', value: '100' }\n]\n\nexport default () => {\n\n  let history = useHistory()\n  let params = queryString.parse(history.location.search)\n  let [limit, setLimit] = useState(params.limit || options[2].value)\n\n  const updateQueryString = (e) => {\n    let value = e.target.value\n    setLimit(value)\n    let queryStringObject = queryString.parse(history.location.search)\n    queryStringObject.limit = value\n    let parsedQueryString = queryString.stringify(queryStringObject)\n    history.push({ search: parsedQueryString })\n  }\n\n  return (\n    <Grid container spacing={1} alignItems=\"center\">\n      <Grid item><SortIcon /></Grid>\n      <Grid item>\n        <InputLabel htmlFor=\"limitResult\">Items per page:</InputLabel>\n      </Grid>\n      <Grid item>\n        <Select id=\"limitResult\" value={limit} onChange={updateQueryString}>\n          {\n            options.map((item, index) => {\n              return (\n                <MenuItem key={index} value={item.value}>\n                  {item.name}\n                </MenuItem>\n              )\n            })\n          }\n        </Select>\n      </Grid>\n    </Grid>\n  )\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux';\nimport * as taskActions from './TaskActions'\nimport TaskList from './TaskList'\nimport Paging from '../../common/Paging/Paging'\nimport { useHistory } from 'react-router-dom'\nimport SortBy from '../../common/SortBy/SortBy';\nimport LimitResult from '../../common/LimitResult/LimitResult'\nimport queryString from 'query-string'\nimport BackdropLoader from '../../common/BackdropLoader/BackdropLoader'\nimport { Grid, Typography } from '@material-ui/core'\n\nconst Task = ({ tasks, taskCount, loading, actions, ...props }) => {\n\n  let history = useHistory();\n  let queryStringObject = queryString.parse(history.location.search);\n  let page = queryStringObject.page || 1;\n  let sortBy = queryStringObject.sortBy || '';\n  let limit = parseInt(queryStringObject.limit) || 10;\n  let count = taskCount ? Math.round(taskCount / limit) : 1;\n\n  useEffect(() => {\n    loadTasks(false);\n  }, [page, sortBy, limit])\n\n  const loadTasks = (key, value) => {\n    let parsedQueryString = queryString.stringify(queryStringObject);\n    parsedQueryString = parsedQueryString ? '?' + parsedQueryString : ''\n    actions.getTasks(parsedQueryString);\n  }\n\n  const remove = (id) => {\n    actions.deleteTask(id)\n      .then( res =>{\n\n      });\n  }\n\n  const handleNewTask = ()=>{\n    history.push('/task/create')\n  }\n\n  return (\n    loading ?\n      <BackdropLoader /> :\n      <>\n        <div>\n          <Typography variant=\"h3\" gutterBottom>\n            All Tasks <Typography variant=\"caption\" gutterBottom onClick={handleNewTask} style={{cursor: 'pointer'}}>New Task</Typography>\n          </Typography>\n        </div>\n        <Grid container spacing={2} alignItems=\"center\" justify=\"flex-end\" className=\"filters-wrapper\">\n          <Grid item><SortBy /></Grid>\n          <Grid item><LimitResult /></Grid>\n        </Grid>\n        <TaskList items={tasks} remove={remove} />\n        <br />\n        <Paging page={page} count={count} loadData={loadTasks} />\n      </>\n  );\n}\n\nTask.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  taskCount: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    tasks: state.tasks,\n    taskCount: state.taskCount,\n    loading: state.apiCallInProgress > 0\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(taskActions, dispatch)\n});\n\nconst connectedStateAndProps = connect(mapStateToProps, mapDispatchToProps);\nexport default connectedStateAndProps(Task);\n","export default {\n  login: '/api/auth/login',\n  task: '/api/task'\n}\n","import axios from 'axios';\nimport apiEndpoints from '../../common/Api/ApiEndpoints'\n\nexport const getTasks = (queryString) => {\n  let url = queryString ? apiEndpoints.task + queryString : apiEndpoints.task;\n  return axios.get(url)\n}\n\nexport const getTaskById = (id) => {\n  return axios.get(apiEndpoints.task + `/${id}`)\n}\n\nexport const createTask = (task) => {\n  return axios.post(apiEndpoints.task, task)\n}\n\nexport const updateTask = (task) => {\n  return axios.put(apiEndpoints.task + `/${task._id}`, task)\n}\n\nexport const deleteTask = (id) => {\n  return axios.delete(apiEndpoints.task + `/${id}`)\n}\n","import actions from './TaskConstants'\nimport * as taskApi from './TaskApi'\nimport { apiCallError, beginApiCall } from '../../common/Api/ApiActions'\n\nexport const getTasksSuccess = (tasks) => ({ type: actions.READ_TASKS, payload: tasks })\nexport const setTaskCount = (count) => ({ type: actions.SET_TASK_COUNT, payload: count })\nexport const getTaskByIdSuccess = (task) => ({ type: actions.GET_TASK_BY_ID, payload: task })\nexport const creteTaskSuccess = (task) => ({ type: actions.CREATE_TASK, payload: task })\nexport const updateTaskSuccess = (task) => ({ type: actions.UPDATE_TASK, payload: task })\nexport const deleteTaskSuccess = (id) => ({ type: actions.DELETE_TASK, payload: id })\n\nexport const getTasks = (queryString) => {\n  return async (dispatch) => {\n    dispatch(beginApiCall())\n    try {\n      let response = await taskApi.getTasks(queryString)\n      dispatch(getTasksSuccess(response.data.items))\n      dispatch(setTaskCount(response.data.count))\n    } catch (error) {\n      apiCallError()\n    }\n  }\n}\n\nexport const getTaskById = (id) => {\n  return async (dispatch) => {\n    try {\n      dispatch(beginApiCall())\n      let response = await taskApi.getTaskById(id)\n      dispatch(getTaskByIdSuccess(response.data.item))\n    } catch (error) {\n      apiCallError()\n    }\n  }\n}\n\nexport const saveTask = task => {\n  return async (dispatch) => {\n    dispatch(beginApiCall())\n    if (task._id) {\n      try {\n        let response = await taskApi.updateTask(task)\n        dispatch(updateTaskSuccess(response.data.item))\n        return response.data.item\n      } catch (error) {\n        apiCallError()\n      }\n    } else {\n      try {\n        let response = await taskApi.createTask(task)\n        dispatch(creteTaskSuccess(response.data.item))\n        return response.data.item\n      } catch (error) {\n        apiCallError()\n      }\n    }\n  }\n}\n\nexport const deleteTask = (id) => {\n  return (dispatch) => {\n    return taskApi.deleteTask(id).then(res => {\n      dispatch(deleteTaskSuccess(id))\n      return res;\n    }).catch(err => {\n      apiCallError();\n    })\n  }\n}\n","export function beginApiCall() {\n  return { type: 'BEGIN_API_CALL' };\n}\n\nexport function apiCallError() {\n  return { type: 'API_CALL_ERROR' };\n}\n"],"sourceRoot":""}